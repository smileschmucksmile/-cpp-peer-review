#include <algorithm>
#include <iostream>
#include <string>
#include <sstream>
#include <string_view>
#include <vector>

using namespace std;

class Domain {
public:
    Domain(const string& domain)
        :domain_(move(domain))
    {
        reverse(domain_.begin(), domain_.end());
        domain_.push_back('.');
    }

    bool IsSubdomain(const Domain& other) const {
        auto mismatched_pair = mismatch(other.domain_.begin(), other.domain_.end(), domain_.begin());
        return mismatched_pair.first == other.domain_.end() ? true : false;
    }

     bool operator==(const Domain& other) const {
         return domain_ == other.domain_;
    }

     string Get() const {
         return domain_;
     }

private:
    string domain_;
};


class DomainChecker {
public:
    template <typename It>
    DomainChecker(It begining, It end)
        :banned_domains_(begining, end)
    {
        sort(banned_domains_.begin(), banned_domains_.end(), [](const Domain& lhs, const Domain& rhs) {
            return lhs.Get() < rhs.Get(); });
        auto last = unique(banned_domains_.begin(), banned_domains_.end(), [](const Domain& lhs, const Domain& rhs) {
            return rhs.IsSubdomain(lhs);
            });
        banned_domains_.erase(last, banned_domains_.end());
    }
    
    bool IsForbidden(const Domain& domain) const {
        auto upper = upper_bound(banned_domains_.begin(), banned_domains_.end(), domain, [](const Domain& lhs, const Domain& rhs) {
            return lhs.Get() < rhs.Get(); });
        if (banned_domains_.begin() == upper) {
            return false;
        }
        else {
           return domain.IsSubdomain(*prev(upper));
        }
    }
    
private:
    vector<Domain> banned_domains_;
};

template <typename Number>
const std::vector<Domain> ReadDomains(istream& input, Number num) {
    vector<Domain> domains;
    domains.reserve(num);
    string line;
    for (Number i = 0; i < num; ++i) {
        getline(input, line);
        domains.emplace_back(line);
    }
    return domains;
}
template <typename Number>
Number ReadNumberOnLine(istream& input) {
    string line;
    getline(input, line);

    Number num;
    std::istringstream(line) >> num;

    return num;
}

int main() {
    const std::vector<Domain> forbidden_domains = ReadDomains(cin, ReadNumberOnLine<size_t>(cin));
    DomainChecker checker(forbidden_domains.begin(), forbidden_domains.end());

    const std::vector<Domain> test_domains = ReadDomains(cin, ReadNumberOnLine<size_t>(cin));
    for (const Domain& domain : test_domains) {
        cout << (checker.IsForbidden(domain) ? "Bad"sv : "Good"sv) << endl;
    }
}
